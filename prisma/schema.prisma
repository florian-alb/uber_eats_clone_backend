// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Shop {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @unique @db.VarChar(255)
  address    Address?  @relation(fields: [addressId], references: [id])
  reviews    Review[]
  products   Product[]
  image      String?
  orders     Order[]
  addressId  String?   @db.Uuid
  User       User[]
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?   @db.Uuid
}

model Product {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String  @db.VarChar(255)
  image       String?
  description String?
  shop        Shop?   @relation(fields: [shopId], references: [id])
  shopId      String? @db.Uuid
  menu        Menu?   @relation(fields: [menuId], references: [id])
  menuId      String? @db.Uuid
  Order       Order?  @relation(fields: [orderId], references: [id])
  orderId     String? @db.Uuid
}

model Menu {
  id       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String    @db.VarChar(255)
  image    String?
  products Product[]
}

model User {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String    @unique
  name      String
  phone     String
  addresses Address[]
  passowrd  Bytes[]
  orders    Order[]
  money     Decimal?
  shop      Shop?     @relation(fields: [shopId], references: [id])
  shopId    String?   @db.Uuid
  role      Role      @default(USER)
}

model Address {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String  @db.VarChar(255)
  address    String
  postalCode String
  city       String
  country    String
  shop       Shop[]
  User       User?   @relation(fields: [userId], references: [id])
  userId     String? @db.Uuid
  Order      Order[]
}

model Category {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @db.VarChar(255)
  shop Shop[]
  icon String
}

model Order {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt         DateTime  @default(now())
  customer          User      @relation(fields: [userId], references: [id])
  shop              Shop      @relation(fields: [shopId], references: [id])
  shopId            String    @db.Uuid
  deliveryAddress   Address   @relation(fields: [deliveryAddressId], references: [id])
  deliveryAddressId String    @db.Uuid
  products          Product[]
  isDelivred        Boolean   @default(false)
  userId            String    @db.Uuid
}

model Review {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  shop   Shop   @relation(fields: [shopID], references: [id])
  shopID String @db.Uuid
  rating Float
  review String
}

enum Role {
  USER
  SHOP
  ADMIN
  BANNED
}
